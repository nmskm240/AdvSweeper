@startuml

package Adv
{
    package Effects
    {
        interface IEffect
        {
            +Activate():void
        }
        class 各種効果
        class EffectData
        {
            -_effect:IEffect
            +<<property>>Effect:IEffect
        }
    }
    class ItemData
    {
        -_isMaterial:bool
        -_effects:List<EffectData>
        -_categories:List<CategoryData>
        +<<property>>IsMaterial:bool{get only}
        +<<property>>Quality:int
        +<<property>>Price:int
        +<<property>>Effects:IEnumerable<EffectData>{get only}
        +<<property>>Categories:IEnumerable<CategoryData>{get only}
        +<<private>>Characteristics:List<CharacteristicsData>
    }
    class EnemyData
    {
        -_attack:int
        -_dropTable:List<ItemData>
        +<<property>>Attack:int{get only}
        +<<property>>DropTable:IEnumerable<ItemData>{get only}
    }
    class StageData
    {
        -_floor:int
        -_spawnRate:float
        -_spawnTable:List<WeightNode<EnemyData>>
        -_itemTable:List<WeightNode<ItemData>>
        -_characteristicsTable:List<WeightNode<CharacteristicsData>>
        -_qualityRange:MinMax
        +<<property>>Floor:int{get only}
        +<<property>>SpawnRate:float{get only}
        +<<property>>SpawnTable:IEnumerable<WeightNode<EnemyData>>{get only}
        +<<property>>ItemTable:IEnumerable<WeightNode<ItemData>>{get only}
        +<<property>>CharacteristicsTable:IEnumerable<WeightNode<CharacteristicsData>>{get only}
        +<<property>>QualityRange:MinMax{get only}
        +Copy(data:StageData):void
    }
    class Treasure
    {
        -_hp:SliderParameter
        -_mp:SliderParameter
        -_basket:ItemCollection
        +<<property>>HP:int
        +<<property>>MP:int
        +Damage(quantity:int):void
        +<<override>>GetItem(item:ItemData):void
        +SeeBasket():void
        +SwapToContainer():void
        -Death():void
    }
    class ItemCollection
    {
        +<<property>>Contents:List<ItemData>
    }
}

package Alchemy
{
    class CategoryData
    class CharacteristicsData
    {
        -_effect:IEffect
        +<<property>>Effect:IEnumerable<IEffect>{get only}
    }
    class RecipeData
    {
        -_needMaterials:List<MaterialAndQuantity>
        -_product:ItemData
        +<<property>>NeedMaterials:List<MaterialAndQuantity>
        +<<property>>Product:ItemData
        +Copy(data:RecipeData):void
    }
    class MaterialAndQuantity
    {
        -_material:AlchemyMaterial
        -_quantity:int
        +<<property>>Material:AlchemyMaterial
        +<<property>>Quantity:int
    }
    class Jar
    {
        -productImage:Image
        -_recipe:RecipeData
        +SetCanAlchemy(canAlchemy:bool):void
        +SetRecipe(recipe:RecipeData):void
        +Alchemy(materials:IEnumerable<ItemData>):ItemData
    }
    class Alchemist
    {
        -_materials:Transform
        -_jar:Jar
        -_selectRecipeData:RecipeData
        -_materialNodes:List<MaterialNode>
        -_canAlchemy:bool
        +Alchemy():void
    }
    abstract AlchemyMaterial
}

package Sweeper
{
    package TileContents
    {
        interface ITileContents
        {
            +<<property>>Image:Sprite
            +Open():void
        }
        class None
        {
            +None()
        }
        class Enemy
        {
            -_enemyData:EnemyData
            +Enemy()
            +Enemy(data:EnemyData)
        }
        class Stair
        {
            +Stair()
        }
        class Pick
        {
            -datas:List<ItemData>
            -OpenProcess():IEnumerator
            +Pick()
            +Pick(datas:List<ItemData>)
        }
        class Exit
        {
            +Exit()
        }
    }
    class Tile
    {
        -_aroundTiles:List<Tile>
        -_contentsMap::Dictionary<Type,int>
        +<<property>>Contents:ITileContents
        +<<property>>ContentsMap:IDictionary<Type,int>{ get only }
        +<<property>>AroundTiles:IEnumerable<TIle>{ get only }
        +<<property>>Pos:Vector2
        +<<property>>CanOpen:bool
        +AddAroundTile(tile:Tile)
        +CountUpAround(target:ITileContents):void
        +Open():void
    }
    class TileView
    {
        -_tileImage:Image
        -_hints:Transform
        -_contents:GameObject
        -_bad:GameObject
        -_animator:Animator
        +Open():void
        +ShowHints(contentsMap:IDictionary<Type,int>):void
        +ShowContens(contents:ITileContents):void
        +ChangeBad():void
    }
    class TileController
    {
        -_tile:Tile
        -_tileView:TileView
    }
    class TileFactory
    class Stage
    {
        -_gridLayoutGroup:GridlayoutGroup
        -viewSize:int
        -_stageData:StageData
        -_info
        +<<property>>Map:GameObject[][]{ private set }
        +<<property>>Width:int{ private set }
        +<<property>>Height:int{ private set }
        +<<property>>NowFloor:int{ private set }
        -Reset(width:int,height:int):void
        -Clear():void
        +Create(width:int, height:int, stageOption:StageOption):void
        +SetContents(contents:ITileContents, index:int):void
        +Next():void
    }
    class StageOption
    {
        +Enemy:int
        +Storage:int
        +Stair:int
        +Openable:int
        +SpawnTable:List<EnemyData>
        +ItemTable:List<ItemData>
    }
}

package UI
{
    package Counters
    {
        class ContentsCounter
        {
            -_image:Sprite
            -_value:TextMeshProUGUI
            +<<property>>Value:int
            +Init(image:Sprite,value:int,operand:bool,color:Color)
        }
        class ContentsCounterFactory
    }
    package Popups
    {
        class Dialog
        {
            -_body:TextMeshProUGUI
            -_onAgree:GameObject
            -_onDisAgree:GameObject
            +Show(type:DialogType,text:string,onAgree:Action,onDisAgree:Action)
        }
        enum DialogType
        {
            AgreeOnly,
            Switch,
        }
        class DialogFactory
    }
    package Sliders
    {
        class SliderParameter
        {
            -_options:SliderParameterOptions
            -_text:TextMeshProUGUI
            -_value:TextMeshProUGUI
            -_slider:Slider
            +<<property>>Name:string{get only}
            +<<property>>Min:float{get only}
            +<<property>>Max:float{get only}
            +<<property>>Value:float
            +Init(name:string,min:float,max:float):void
            +SetName(name:string):void
            +Range(min:float,max:float):void
        }
        enum SliderParameterOptions
        {
            ValueNone,
            ValueOnly,
            ValueAndMax,
        }
    }
    package Viewers
    {
        class ItemInfoViewer
        {
            -_order:ItemData
            -_itemName:TextMeshProUGUI
            -_itemImage:Image
            -_itemQuality:SliderParameter
            -_effectIcons:Transform
            -_characteristicIcons:Transform
        }
        class ItemNode
        {
            -_image:Image
            -_text:TextMeshProUGUI
            -_item:ItemData
            -_holding:int
            +<<property>>Item:ItemData{get only}
            +<<property>>Holding:int
            +Init(item:ItemData):void
        }
        class ItemNodeFactroy
        class ItemViewer
        {
            -_contents:Transform
            -_collections:ItemCollection
            -_factory:IFactory<GameObject>
            #_order:ItemViewOrder
            #_closeButton:Button
            -CreateItemNode(item:ItemData):void
            +Close():void
            +Show(collection:ItemCollection):void
        }
        class ItemSelector
        {
            -_selectedItems:ItemCollection
            -_selectNum:int
        }
        class ItemViewOrder
        {
            +<<property>>IDs:List<string>
            +Reset():void
        }
        class ItemSelectOrder
        {
            +SelectNum:int
        }
    }
    class StageInfo
    {
        -_contents:Transform
        -_floor:TextMeshProUGUI
        -_timer:ContentsCounter
        -factory:IFactory<GameObject
        +SetTimer(timeLimit:int):void
        +SetFloor(floorInfo:string)
        +ShowContents(option:StageOption)
        -CountContents<T>(list:IEnumerable<T>)
    }

    class StageNode
    {
        -_text:TextMeshProUGUI
        -_base:StageData
        -_loadStageData:StageData
    }

    class PickItemFactory
    class PickItem
    {
        -_image:Image
        -_rectTransform:RectTransform
        +Init(sprite:Sprite):void
        +Move(tf:Transform):void
    }
    class RecipeNode
    {
        -_image:Image
        -_name:TextMeshProUGUI
        -_out:RecipeData
        -_base:RecipeData
        +Init(recipe:RecipeData):void
    }
    class MaterialNodeFactory
    class MaterialNode
    {
        -_image:Image
        -_requiredAndSelectedNum:TextMeshProUGUI
        -_selectMaterials:ItemCollection
        -_order:ItemSelectOrder
        -_materialAndQuantity:MaterialAndQuantity
        -_selectedMaterials:List<ItemData>
        +<<property>>NeedQuantity:int{get only}
        +<<property>>SelectedMaterials:IEnumerable<ItemData>{get only}
        -WaitSelect():IEnumerator
        +Init(materialAndQuantity:MaterialAndQuantity):void
        +SelectClear():void
    }
}

abstract LongPressMonoBehaviour
{
    #OnLongPressed():void
}
abstract BaseData
{
    -_id:string
    -_name:string
    -_info:string
    -_image:Sprite
    +<<property>>ID:string{get only}
    +<<property>>Name:string{get only}
    +<<property>>Info:string{get only}
    +<<property>>Image:Sprite{get only}
    +Copy(data:BaseData):void
}
class ObjectCompare<T>
class Player
{
    -_container:ItemCollection
    +<<virtual>>GetItem(item:ItemData):void
    +GetItmes(items:IEnumerable<ItemData>):void
    +<<virtual>>RemoveItem(item:ItemData):void
    +RemoveItems(items:IEnumerable<ItemData>):void
}
class GameManager
class SaveData
{
    -_container:ItemCollection
    +ContainerDatas:List<string>
}
class SaveLoadManager
{
    -_data:SaveData
    -_filePath:string
    +Save():void
    +Load():void
}
interface IFactory<T>
{
    +Create():T
}


Enemy ..|> ITileContents
None ..|> ITileContents
Stair ..|> ITileContents
Pick ..|> ITileContents
Exit ..|> ITileContents

TileFactory ..|> IFactory
DialogFactory ..|> IFactory
ContentsCounterFactory ..|> IFactory
ItemNodeFactroy ..|> IFactory
PickItemFactory ..|> IFactory
MaterialNodeFactory --|> IFactory

TileController ..|> IPointerClickHandler
StageNode ..|> IPointerClickHandler
ItemNode ..|> IPointerClickHandler
RecipeNode ..|> IPointerClickHandler
MaterialNode ..|> IPointerClickHandler

各種効果 ..|> IEffect

ObjectCompare ..|> IEqualityComparer

SaveData ..|> ISerializationCallbackReceiver

RecipeData --|> BaseData
AlchemyMaterial --|> BaseData
CharacteristicsData --|> BaseData
EnemyData --|> BaseData
StageData --|> BaseData
BaseData --|> ScriptableObject
ItemCollection --|> ScriptableObject
ItemViewOrder --|> ScriptableObject

ItemData --|> AlchemyMaterial
CategoryData --|> AlchemyMaterial

Treasure --|> Player
Alchemist --|> Player

ItemSelector --|> ItemViewer
ItemSelectOrder --|> ItemViewOrder
ItemNode --|> LongPressMonoBehaviour

Stage -- StageInfo
Dialog -- DialogType

TileController *--> Tile
TileController *--> TileView
Tile *--> ITileContents
Stage *--> StageOption

CategoryData --o ItemData
CharacteristicsData --o ItemData
ItemNode --o ItemViewer

MaterialAndQuantity --* RecipeData
SaveData --* SaveLoadManager

TileFactory ..> Tile : Create
DialogFactory ..> Dialog : Create
ContentsCounterFactory ..> ContentsCounter : Create
ItemNodeFactroy ..> ItemNode : Create
PickItemFactory ..> PickItem : Create
MaterialNodeFactory ..> MaterialNode : Create
MaterialNode ..> ItemSelectOrder : Data set
ItemViewer ..> ItemViewOrder : Data set & load
ItemSelector ..> ItemSelectOrder : Data set & load

@enduml