@startuml

package Adv
{
    package Effects
    {
        interface IEffect
        {
            +Activate():void
        }
        class 各種効果
    }
    interface IHaveRariry
    {
        +<<property>>Rarity:int{get only}
    }
    class RandomWithWeight <<static>>
    {
        +<<static>>Lotto<T>(item:IEnumerable<T>):IEnumerable<T>
    }
    class ItemData
    {
        -_image:Sprite
        -_id:string
        -_name:string
        -_info:string
        -_effects:List<IEffect>
        -_categories:List<CategoryData>
        +<<property>>Imgae:Sprite{get only}
        +<<property>>ID:string{get only}
        +<<property>>Name:string{get only}
        +<<property>>Info:string{get only}
        +<<property>>Quality:int
        +<<property>>Effects:IEnumerable<IEffect>{get only}
        +<<property>>Categories:IEnumerable<CategoryData>{get only}
    }
    class EnemyData
    {
        -_image:Sprite
        -_id:string
        -_name:string
        -_attack:int
        -_dropTable:List<ItemData>
        +<<property>>Image:Sprite{get only}
        +<<property>>ID:string{get only}
        +<<property>>Name:string{get only}
        +<<property>>Attack:int{get only}
        +<<property>>DropTable:IEnumerable<ItemData>{get only}
    }
    class StageData
    {
        -_name:string
        -_floor:int
        -_spawnRate:float
        -_spawnTable:List<EnemyData>
        -_itemTable:List<ItemData>
        +<<property>>Name:string{get only}
        +<<property>>Floor:int{get only}
        +<<property>>SpawnRate:float{get only}
        +<<property>>SpawnTable:IEnumerable<EnemyData>{get only}
        +<<property>>ItemTable:IEnumerable<ItemData>{get only}
        +Copy(data:StageData):void
        +LottoSpawnTable(count:int):IEnumerable<EnemyData>
        +LottoItemTable(count:int):IEnumerable<ItemData>
    }
    class Player
    {
        -_hp:SliderParameter
        -_mp:SliderParameter
        +<<property>>HP:int
        +<<property>>MP:int
        +Damage(quantity:int):void
        +GetItem(item:ItemData):void
        +UseItem(item:ItemData):void
        -Death():void
    }
}

package Alchemy
{
    class CategoryData
    {
        -_id:string
        -_name:string
        +<<property>>ID:string{get only}
        +<<property>>Name:string{get only}
    }
    class RecipeData
    {
        -_needMaterials:List<MaterialAndQuantity>
        -_product:ItemData
        +<<property>>NeedMaterials:List<MaterialAndQuantity>
        +<<property>>Product:ItemData
    }
    class MaterialAndQuantity
    {
        -_material:ScriptableObject
        -_quantity:int
        +<<property>>Material:ScriptableObject
        +<<property>>Quantity:int
    }
}

package Sweeper
{
    package TileContents
    {
        interface ITileContents
        {
            +<<property>>Image:Sprite
            +Open():void
        }
        class None
        {
            +None()
        }
        class Enemy
        {
            -_enemyData:EnemyData
            +Enemy()
            +Enemy(data:EnemyData)
        }
        class Stair
        {
            +Stair()
        }
        class Storage
        {
            -_itemData:ItemData
            +Srotage()
            +Storage(data:ItemData)
        }
        class Exit
        {
            +Exit()
        }
    }
    class Tile
    {
        -_aroundTiles:List<Tile>
        -_contentsMap::Dictionary<Type,int>
        +<<property>>Contents:TileContents
        +<<property>>ContentsMap:IDictionary<Type,int>{ get only }
        +<<property>>AroundTiles:IEnumerable<TIle>{ get only }
        +<<property>>Pos:Vector2
        +<<property>>CanOpen:bool
        +AddAroundTile(tile:Tile)
        +CountUpAround(target:TileContents):void
        +Open():void
    }
    class TileView
    {
        -_tileImage:Image
        -_hints:Transform
        -_contents:GameObject
        -_bad:GameObject
        -_animator:Animator
        +Open():void
        +ShowHints(contentsMap:IDictionary<Type,int>):void
        +ShowContens(contents:TileContents):void
        +ChangeBad():void
    }
    class TileController
    {
        -_tile:Tile
        -_tileView:TileView
    }
    class TileFactory
    class Stage
    {
        -_gridLayoutGroup:GridlayoutGroup
        -viewSize:int
        -_stageData:StageData
        -_info
        +<<property>>Map:GameObject[][]{ private set }
        +<<property>>Width:int{ private set }
        +<<property>>Height:int{ private set }
        +<<property>>NowFloor:int{ private set }
        -Reset(width:int,height:int):void
        -Clear():void
        +Create(width:int, height:int, stageOption:StageOption):void
        +SetContents(contents:TileContents, index:int):void
        +Next():void
    }
    class StageOption
    {
        +Enemy:int
        +Storage:int
        +Stair:int
        +SpawnTable:List<EnemyData>
        +ItemTable:List<ItemData>
    }
}

package UI
{
    class ContentsCounter
    {
        -_image:Sprite
        -_count:TextMeshProUGUI
        +Init(image:Sprite,count:int)
    }
    class ContentsCounterFactory
    class Dialog
    {
        -_body:TextMeshProUGUI
        -_onAgree:GameObject
        -_onDisAgree:GameObject
        +Show(type:DialogType,text:string,onAgree:Action<string>,onDisAgree:Action<string>)
    }
    enum DialogType
    {
        AgreeOnly,
        Switch,
    }
    class DialogFactory
    class StageInfo
    {
        -_contents:Transform
        -_floor:TextMeshProUGUI
        -factory:IFactory<GameObject
        +SetFloor(floorInfo:string)
        +ShowContents(option:StageOption)
        -CountContents<T>(list:IEnumerable<T>)
    }
    class SliderParameter
    {
        -_text:TextMeshProUGUI
        -_slider:Slider
        +<<property>>Name:string{get only}
        +<<property>>Min:float{get only}
        +<<property>>Max:float{get only}
        +<<property>>Value:float
        +Init(name:string,min:float,max:float):void
        +SetName(name:string):void
        +Range(min:float,max:float):void
    }
    class StageNode
    {
        -_text:TextMeshProUGUI
        -_base:StageData
        -_loadStageData:StageData
    }
    class TitleOptionsManager
    {
        -_tapZone:EventTrigger
    }
    class ItemNode
    {
        -_image:Image
        -_text:TextMeshProUGUI
        -_item:ItemData
        -_holding:int
        +<<property>>Item:ItemData{get only}
        +<<property>>Holding:int
        +Init(item:ItemData):void
    }
    class ItemNodeFactroy
    class ItemViewer
    {
        -_contents:Transform
        -_factory:IFactory<GameObject>
        -_nodes:Dictionary<ItemData,GameObject>
        +AddItem(item:ItemData):void
        +GetNode(item:ItemData):GameObject
    }
    class PickItemFactory
    class PickItem
    {
        -_image:Image
        -_rectTransform:RectTransform
        +Init(sprite:Sprite):void
        +Move(tf:Transform):void
    }
}

class GameManager
interface IFactory<T>
{
    +Create():T
}


Enemy ..|> ITileContents
None ..|> ITileContents
Stair ..|> ITileContents
Storage ..|> ITileContents
Exit ..|> ITileContents

TileFactory ..|> IFactory
DialogFactory ..|> IFactory
ContentsCounterFactory ..|> IFactory
ItemNodeFactroy ..|> IFactory
PickItemFactory ..|> IFactory

TileFactory ..> Tile : Create
DialogFactory ..> Dialog : Create
ContentsCounterFactory ..> ContentsCounter : Create
ItemNodeFactroy ..> ItemNode : Create 
PickItemFactory ..> PickItem : Create

TileController ..|> IPointerClickHandler
StageNode ..|> IPointerClickHandler
ItemNode ..|> IPointerClickHandler

EnemyData ..|> IHaveRariry
ItemData ..|> IHaveRariry

IEffect ..|> 各種効果

RecipeData --|> ScriptableObject
CategoryData --|> ScriptableObject
ItemData --|> ScriptableObject
EnemyData --|> ScriptableObject
StageData --|> ScriptableObject

Player -- ItemViewer
ItemViewer -- ItemNode

TileController *--> Tile
TileController *--> TileView
Stage *--> StageOption

MaterialAndQuantity --* RecipeData

@enduml